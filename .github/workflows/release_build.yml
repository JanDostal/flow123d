name: Build release package
# Build official release installation packages on the Jenkins.

#on:
  #release:
    #types: [created, published, edited, released]

#on:
#  push:
#    tags:
#    - 'v*' # Push events to matching v*, i.e. v1.0, v20.15.10

on:
  push

# TODO: add to the User guidel reference to the HTML generated doc and mention that one should trust the generated part 

env:
  DOCKER_USER: ${{secrets.DOCKER_HUB_FLOW123D_USERNAME}}
  DOCKER_PASSWORD: ${{secrets.DOCKER_HUB_FLOW123D_TOKEN}}
  environment: gnu
  build_type: release
  build_container: contgnurelease
  FLOW: /opt/flow123d/flow123d
  
jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout
      uses: actions/checkout@v2
      
    - name: Docker Hub login      
      #uses: docker/login-action@v1  
      # docker/* provides various actions provided by docker, but that requires learning their approach of CI/CD
      run: |
        echo $DOCKER_PASSWORD | docker login -u $DOCKER_USER --password-stdin

    - name: Set variables
      id: vars
      run: |
        # make_packages <environment> <image_name_base> [push]  
        config/package/make_packages.sh ${environment} flow123d push
        # config/package/make_packages.sh ${environment} ci push
      
      
        #destination="$(pwd)/publish_${environment}"
        #imagesversion="$(cat $(pwd)/config/docker/image_tag)"
        release_version="$(cat $(pwd)/version)"      

        #echo "destination=${destination}" >> $GITHUB_ENV
        #echo "imagesversion=${imagesversion}" >> $GITHUB_ENV
        #echo "release_version=${release_version}" >> $GITHUB_ENV      

        #echo "Variables summary"
        #echo build_container: \"${build_container}\"
        #echo release_version: \"${release_version}\"
        #echo environment: \"${environment}\"
        #echo imagesversion: \"${imagesversion}\"
        
        # can not use environment variables in github actions
        echo ::set-output name=pubdir:"publish_${environment}"
        echo ::set-output name=relver:"${release_version}"
        

    #- name: Build
      #run: |
        #docker rm -f  || echo "container not running"
        #bin/fterm update
        #bin/fterm rel_$environment -- --privileged -di --name ${build_container} --volume $(pwd):$FLOW
         #--volume /home/builder/git-cache/flow123d.git:/home/builder/git-cache/flow123d.git \
        
        #copy config
        #docker exec ${build_container} ls $FLOW
        #docker exec ${build_container} cp $FLOW/config/config-jenkins-docker-${build_type}.cmake $FLOW/config.cmake

        #configure and compile
        #docker exec ${build_container} git config --global --add safe.directory $FLOW
        #docker exec ${build_container} git config --global --add safe.directory $FLOW/bin/yaml_converter
        #docker exec ${build_container} git config --global --add safe.directory $FLOW/src/dealii
        
        #docker exec ${build_container} git config --global --add safe.directory $FLOW/third_party/bparser
        #docker exec ${build_container} git config --global --add safe.directory $FLOW/third_party/json-3.10.5
        #docker exec ${build_container} git config --global --add safe.directory $FLOW/third_party/gtest-1.10.0
        #docker exec ${build_container} make -C $FLOW -j4 all
    #- name: make doc
      #run: |
        #docker exec ${build_container} make -C ${FLOW} FORCE_DOC_UPDATE=1 ref-doc
        #docker exec ${build_container} make -C ${FLOW} html-doc
        #docker exec ${build_container} make -C ${FLOW} doxy-doc
        
    #- name: package
      #run: |        
        #make -C config/package \
              #container_name=${build_container} \
              #install_image="install-${environment}:${imagesversion}" \
              #target_image=flow123d-${environment} \
              #image_tag=${release_version} \
              #destination=${destination} \
              #all

        #make -C config/package \
              #container_name=${build_container} \
              #target_image=flow123d-${environment} \
              #image_tag=${release_version} \
              #destination=${destination} \
              #push-to-hub

        #ls -l
        #ls -l publish_${environment}

        #echo ${{ steps.vars.outputs.pubdir }}    
        #echo ${{ steps.vars.outputs.relver }}    


        
              
#    - name: Release
#      uses: softprops/action-gh-release@v1
#      with:
#          files: |
#            flow123d_${release_version}_doc.pdf
#            flow123d_${release_version}_linux_install.tar.gz
#            flow123d_${release_version}_windows_install.exe
 #         name: release_${release_version}

    - name: SSH
      uses: appleboy/scp-action@master
      with:
        host: ${{ secrets.PUBLISH_HOST }}
        username: ${{ secrets.PUBLISH_USER }}
        #key: ${{ secrets.PUBLISH_KEY }}
        password: ${{ secrets.PUBLISH_PASS }}
        #passphrase: ${{ secrets.PUBLISH_PASSPHRASE }}
        port: 22
        source: "${{ steps.vars.outputs.pubdir }}/doxygen, 
                 ${{ steps.vars.outputs.pubdir }}/flow123d_${{ steps.vars.outputs.relvar }}_doc.pdf,
                 ${{ steps.vars.outputs.pubdir }}/flow123d_${{ steps.vars.outputs.relvar }}_linux_install.json,
                 ${{ steps.vars.outputs.pubdir }}/flow123d_${{ steps.vars.outputs.relvar }}_linux_install.tar.gz,
                 ${{ steps.vars.outputs.pubdir }}/flow123d_${{ steps.vars.outputs.relvar }}_windows_install.exe,
                 ${{ steps.vars.outputs.pubdir }}/flow123d_${{ steps.vars.outputs.relvar }}_windows_install.json,
                 ${{ steps.vars.outputs.pubdir }}/htmldoc,
                 ${{ steps.vars.outputs.pubdir }}/imagename"
        #source: "${{ steps.vars.outputs.pubdir }}/*"
        target: "~/packages/${{ steps.vars.outputs.relvar }}"
        strip_components: 1
        

    - name: Release add assets
      # Whole action triggered by release change.
      # We add created assets: PDF, and installation packages
      uses: softprops/action-gh-release@v1
      if: startsWith(github.ref, 'refs/tags/')
      with:
        files: |
          ${{ steps.vars.outputs.pubdir }}/flow123d_${{ steps.vars.outputs.relvar }}_doc.pdf
          ${{ steps.vars.outputs.pubdir }}/flow123d_${{ steps.vars.outputs.relvar }}_linux_install.tar.gz
          ${{ steps.vars.outputs.pubdir }}/flow123d_${{ steps.vars.outputs.relvar }}_windows_install.exe
        
          #tag_name: v${{ steps.getversion.outputs.version }}
          #release_name: release_${{ steps.getversion.outputs.version }}
        #env:
          #GITHUB_TOKEN: ${{ secrets.RELEASE_TOKEN }}
